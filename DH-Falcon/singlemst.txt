struct node{
int lock;
Point set;
Point src;
Point dst;
};
int hchanged, changed;
void reset(Point   p, Graph   graph,Set set[Point(graph)]){
p.Weight=99999999;
p.minedge=99999999;
p.minppty.lock=0;
}
void minset(Point   p, Graph   graph,Set  set[Point(graph)]){
int ch;
Point (graph)  t1;
Point (graph)  t2;
foreach(t In p.outnbrs){
t1=set.find(p);
p.minedge=99999999;
t2=set.find(t);
if(t1!=t2){
MIN(t1.Weight,graph.getweight(p,t),changed);
MIN(t2.Weight,graph.getweight(p,t),changed);
}
}
}

void Minedge(Point   p,Graph graph,Set set[Point(graph)]){
Point(graph) t1;
Point(graph) t2;
int t3;
Edge (graph) e;
foreach(t In p.outnbrs){
t1=set.find(p);
t2=set.find(t);
t3=graph.getWeight(p,t);
if(t1!=t2){
if( t3==t1.Weight){
int unnikri=0;
single(t1.minppty.lock){
e=graph.getedge(p,t);
e.mark=1;////add edge to mst
t1.minppty.src=p;
t1.minppty.dst=t;
t1.Weight=t3;
t1.minppty.set=t2;
}
}
if(t3==t2.Weight){
single(t2.minppty.lock){
e=graph.getedge(p,t);
e.mark=1;//add edge to mst
t2.minppty.src=p;
t2.minppty.dst=t;
t2.Weight=t3;
t2.minppty.set=t1;
}
}
}
}
}
void mstunion(Point   p,Graph graph,Set set[Point(graph)]){
Point (graph)t1;
Point (graph)t2;
int t3,t4;
t1=set.find(p);
t2=t1.minppty.set;
t3=t1.minppty.lock;
t4=t2.minppty.lock;
if(t1!=t2 && t3==1){
set.Union(t1,t2);
changed=1;
}
}
initmark(Edge   e, Graph  graph){
e.mark=999999999;
}
int main(int argc,char *argv[]){
Graph hgraph;
hgraph.addPointProperty(minppty,struct node);
hgraph.addPointProperty(Weight,int);
hgraph.addEdgeProperty(mark,int);
hgraph.addPointProperty(minedge,int);
hgraph.read(argv[1]);
Set hset[Point(hgraph)];
changed=0;
foreach(t In hgraph.edges)initmark(t,hgraph);
while(1){
changed=0;
foreach(t In hgraph.points)reset(t,hgraph,hset);
foreach(t In hgraph.points)minset(t,hgraph,hset);
foreach(t In hgraph.points)Minedge(t,hgraph,hset);
foreach(t In hgraph.points)mstunion(t,hgraph,hset);
if(changed==0)break;
}

unsigned int  mst=0;
foreach (t In hgraph.edges){if(t.mark==1)mst=mst+t.weight;}
printf("mst cost=%lu",mst);
}

