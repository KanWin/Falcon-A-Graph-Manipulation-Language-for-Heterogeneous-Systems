 int ntria;
int <GPU>changed,hchanged,<GPU>pnnodes,<GPU>pntriangles,<GPU>success;
int <GPU>aborted;
struct node{
Point nodes[3];
struct_rec node neighbours[3];
Point neighedgestart[3];
int isbad;
int isdel;
int obstuse;
int owner;
int dims;
int index;
};
struct cent {
double centerx;
double centery;
};
void verify(struct node <GPU> T,Graph <GPU> graph){
int x;
if(T.isdel==0 && T.isbad==1){changed=1;}
}

double distanceSquare(Point <GPU> p1,Point <GPU> p2,Graph <GPU> graph){
double x1= p1.x-p2.x;
double y1=p1.y-p2.y;
double dsqr= x1*x1+y1*y1;
return dsqr;
}

double distance(Point <GPU> one, Point <GPU> two, Graph <GPU> graph) {
return sqrtf(distanceSquare(one, two, graph));
}

//function checkbad
bool checkbad(struct node<GPU> t, Graph<GPU>graph){
for(int i=0;i<3;i++){
Point  p1,p2,p3;
p1=t.nodes[i];
int te=(i+1)/3;
int te2=(i+2)/3;
 p2=t.nodes[te];
 p3=t.nodes[te2];
double vax=p2.x-p1.x;
double vay=p2.y-p1.y;
double vbx=p3.x-p1.x;
double vby=p3.y-p1.y;
double dp=vax*vbx+vay*vby;
if(dp<0) t.obstuse=i;
else {
   double dstsqrap1=distanceSquare(p2,p1,graph);
   double dstsqrap2=distanceSquare(p1,p3,graph);
   double c= dp* sqrt(dstsqrap1*dstsqrap2);
   if(c> cos(30*22/180*7)) return 1;
}
}
}
int adjacent(struct node <GPU> t1,struct node<GPU> t2,Graph <GPU> graph){
int common,firstmatch;
common=0;
firstmatch=3;
for( int i=0;i<3;i++){
 for(int j=0;i<3;j++){
   if(t1.nodes[i]==t2.nodes[j] && t1.nodes[i]!=INVALID){
       if(++common==2)return firstmatch;
       else firstmatch=i;
    }
}
}
}

//function findneighbours
void findneighbours(struct node <GPU> t ,Graph<GPU> graph){
int iirow=0;
foreach(i In graph.triangle){
if(t!=i){
 int commonedge=adjacent(t, i,graph);
if(commonedge<3 &&  iirow<3){
   t.neighbours[iirow]=i;
   t.neighedgestart[iirow]=t.point[commonedge];
 ++iirow;
}
}
}
for(;iirow<3;++iirow){
t.neighbour[iirow]=INVALID;
 t.neighedgestart[iirow]=INVALID;
 }

}

//function distance square


//function dinit

void dinit(struct node <GPU> t,Graph<GPU> graph){

t.obtuse=3;
t.isbad=checkbad(t,graph);
t.isdel=0;
}



//getcenter function

struct cent getCenter(struct node<GPU> t, Graph <GPU> graph){
struct cent ce1;
Point p1,p2,p3;
 p1=t.nodes[0];
 p2=t.nodes[1];
 p3=t.nodes[2];
if(t.dims==2){
ce1.centerx=t.nodes[0].x+t.nodes[1].x;
ce1.centery= t.nodes[0].y+t.nodes[1].y;//statement not prinint t parent not null
return ce1;
}
double vax=p2.x-p1.x;
double vay=p2.y-p1.y;
double vbx=p3.x-p1.x;
double vby=p3.y-p1.y;
double xxlen=distance(p1,p2,graph);
double yylen=distance(p1,p3,graph);
double cosine=(vax*vbx+vay*vby)/(xxlen*yylen);
double sinesq= 1-cosine*cosine;
double plen=yylen/xxlen;
double ss= plen *cosine;
double tt=plen*sinesq;
double wp=(plen-cosine)/(2*tt);
double wb=0.5 -(wp*ss);
ce1.centerx=p1.x*(1-wp-wb)+p2.x*wb+p3.x*wp;
ce1.centery=p1.y*(1-wp-wb)+p2.y*wb+p3.y*wp;
return ce1;
}

//function radius sqaure

double radiusSqaure(Point <GPU> p1,Point <GPU> p2,Graph <GPU> graph){
return distanceSquare(p1,p2,graph);


}


//function inCircumCircle
bool inCircumCircle(Point <GPU> p0 , Point <GPU> p1,struct node<GPU> t1,Graph <GPU> graph){
struct cent ce1;
ce1=getCenter(t1,graph);
Point  P1,P2;
P1.x=ce1.centerx;
P1.y=ce1.centery;
P2.x=p1.x;//statement not printint p2 parent not null
P2.y=p1.y;//statement not printint p2 parent not null
double dd= distanceSquare(P2,P1,graph);
return dd<=radiusSqaure(P2,P1,graph);
}

//function drefine


void drefine(struct node <GPU> t,Graph <GPU> graph){
struct cent cent_new;
Collection  pred[struct node (graph)], frontier[struct node (graph)], post[struct node (graph) ], conntria[ struct node (graph)];
Collection  connection[Point (graph)];
struct node (graph) ceelem;
if(  !( t.isdel) && !(t.isbad)){
ceelem=t;
int cebot;
cebot=t.obtuse;
int itr=0;
while(cebot<3 && ++itr<50  && ceelem.index<graph.ntriangle){//modi
ceelem=getOpposite(ceelem,graph);
if(ceelem.index< graph.ntriangle){
ceelem=ceelem.obtuse;
}
}
if(ceelem.index>=1000 || ceelem.isdel){
ceelem=t;
cebot=ceelem.obtuse;
}
cent_new=getCenter(ceelem,graph);
Point P1,(graph)P0;
P1.x=cent_new.centerx;
P1.y=cent_new.centery;
pred.add(ceelem);
frontier.add(ceelem);
while(frontier.getSize()>0){
struct node (graph) curr=frontier.del();
for(int i=0;i<3;i++){
struct node (graph)  next;
next=curr.neighbours[i];
if(next.index>=graph.ntriangle)break;//modi
if(next.isdel)continue;
if(next!=ceelem && inCircumCircle(P0,P1,ceelem,graph)){
unsigned jj;
for(jj=0;jj<pred.getSize();jj++){
 if(pred[jj]==next)break;
}
if(jj==pred.getSize()){
pred.add(next);
frontier.add(next);
}
}
else {
Point (graph) p1=curr.neighedgestat[ii];
Point (graph) p2=curr.neighedgestat[(ii+1)%3];
unsigned jj;
for(jj=0;jj<connection.getSize();jj+=2){
if(connection[jj]==p1 && connection[jj+1]==p2)break;
}
if(jj==connection.getSize()){
connection.add(p1);
connection.add(p2);
conntria.add(curr);
conntria.add(next);
}

}

}
}
}
single(pred){
++successfull;
Point (graph) p0=graph.addPoint(cent_new.centerx,cent_new.centery);
for (unsigned ii = 0; ii <connection.getSize(); ii += 2) {
Point (graph) p1=connection[ii];
Point (graph) p2=connection[ii+1];
struct node (graph) connsrc;
connsrc= conntria[ii];
struct node (graph) conndst;
conndst=conntria[ii+1];
struct node (graph) newtri;
newtri=graph.addTriangle(p0,p1,p2);
int jj1;
for (jj1 = 0; jj1 < pred.getSize(); jj1+=1) {
if (pred[jj1] == conndst)  break;
jj1++;
}
struct node (graph) newconn;
if(jj1==pred.getSize())newconn=conndst;
else newconn=connsrc;
int iinbr=0;
newtri.neighbour[0]=newconn;//modi
newtri.neighedgestart[0]=p1;//modi
iinbr++;
for (unsigned jj = 0; jj < post.getSize(); ++jj) {
int commonedgestart= adjacent( newtri, post[jj],graph);
if (commonedgestart < 3 && iinbr<3){
newtri.neighbours[iinbr]=post[jj];
struct node (graph) temp1;
temp1=post[jj];
newtri.neighedgestart[iinbr]=temp1.nodes[commonedgestart];
++iineighbor;
updateNeighbor(post[jj], newconn, newtri, neighbors, tnodes); 
}
}
post.add( newtri);
}
unsigned jj;
for (jj = 0; jj < pred.getSize(); ++jj) {
struct node (graph) temp1;
temp1.isdel=1;
}



for (unsigned ii = 0; ii < post.getSize(); ++ii) {
   struct node (graph) xyx;
    xyx.obtuse = 3;
   xyx.isbad = checkbad(xyx,graph);
 lchanged |= xyx.isbad;
                 
                }
if (lchanged) {
                *changed = 1;
        }
}
else {

lchanged = 1;
++aborted;
continue;
}

}

//function Main
int main(){
int ntria;
Graph hgraph;
//hgraph.addProperty(triangle1 ,struct node[1000]);
hgraph.addProperty(triangle ,struct node[ntria]);
hgraph.readNodes(argv[1]);
hgraph.readTriangle(argv[1]);
hgraph.getType() <GPU>graph;
graph=hgraph;
foreach(t In graph.triangle)dinit(t,graph);
foreach(t In graph.triangle)findneighbours(t,graph);
do{
changed=0;
foreach(t In graph.triangle)countbad(t,graph);
foreach(t In graph.triangle)drefine(t,graph);
hchanged=changed;
}while(hchanged);
foreach(t In graph.triangle)verify(t,graph);
}
