int <GPU> changed=0,hchanged;
void BFS(Point <GPU> p,Graph <GPU> graph){
foreach(t In p.outnbrs){
MIN(t.dist,p.dist+1,graph.changed[0]);
}
}
 void relaxgraph( Point <GPU> p,Graph <GPU> graph){
foreach(t In p.outnbrs)      {
  MIN(t.dist,p.dist+graph.getweight(p,t),graph.changed[0]);
}
}

void SSSPBFS(char *name) {
	Graph  hgraph;
hgraph.addPointProperty(dist,int);
hgraph.addProperty(changed,int);
hgraph.getType() <GPU> graph;
hgraph.getType() <GPU> graph1;
hgraph.addPointProperty(dist1,int);
	hgraph.read(name);
	graph=hgraph;
	graph1=hgraph;
	foreach(t In graph.points)t.dist=1234567890;
	foreach(t In graph1.points)t.dist=1234567890;
	graph.points[0].dist=0;
	graph1.points[0].dist=0;
parallel sections {
section {
	while(1){ 
	graph1.changed[0]=0;
	foreach(t In graph1.points)BFS(t,graph1);
		if(graph1.changed[0]==0) break; 
     }
}
section {
	while(1){ 
        graph.changed[0]=0;
	foreach(t In graph.points)relaxgraph(t,graph);
	if(graph.changed[0]==0) break; 
     }
}
}
 /   hgraph.dist=graph.dist;//sssp dist
    hgraph.dist1=graph1.dist;//bfs dist
return;
}
int main(int argc,char *argv[]){
SSSPBFS(argv[1]);
}
