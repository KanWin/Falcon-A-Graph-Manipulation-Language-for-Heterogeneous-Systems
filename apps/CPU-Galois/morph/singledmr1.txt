 int ntria;
int  changed,hchanged, pnnodes, pntriangles, success;
int  aborted;
struct node{
Point nodes[3];
struct_rec node neighbours[3];
Point neighedgestart[3];
int isbad;
int isdel;
int obtuse;
int owner;
int dims;
int id;
int index;
};
struct cent {
float centerx;
float centery;
};
Graph hgraph;
Collection WL1[struct node],WL2[struct node], *current[struct node],*collnext[struct node],*colltemp[struct node];
void readTriangle(Graph hgraph,char *name){
FILE *fp;
FILE *fp1;
char temp[100];
int ntriaone,ntriatwo,n1,n2,n3,n4;
char *name1,*name2;
name1=(char *)malloc(sizeof(char)*100);
name2=(char *)malloc(sizeof(char)*100);
sprintf(name1,"%s.ele",name);
sprintf(name2,"%s.poly",name);
fp=fopen(name1,"r");
fscanf(fp,"%d",&ntriaone);
fgets(temp,100,fp);
for(int i=0;i<ntriaone;i++){
fscanf(fp,"%d%d%d%d",&n1,&n2,&n3,&n4);
hgraph.triangle[n1].id=n1;
hgraph.triangle[n1].nodes[0]=n2;
hgraph.triangle[n1].nodes[1]=n3;
hgraph.triangle[n1].nodes[2]=n4;
fgets(temp,100,fp);
}
fclose(fp);
fp1=fopen(name2,"r");
fgets(temp,100,fp1);
fscanf(fp1,"%d",&ntriatwo);
fgets(temp,100,fp1);
for(int i=0;i<ntriatwo;i++){
fscanf(fp1,"%d%d%d%d",&n1,&n2,&n3,&n4);
hgraph.triangle[n1+ntriaone].id=n1+ntriaone;
hgraph.triangle[n1+ntriaone].nodes[0]=n2;
hgraph.triangle[n1+ntriaone].nodes[1]=n3;
hgraph.triangle[n1+ntriaone].nodes[2]=INVALID;
fgets(temp,100,fp1);
}
fclose(fp1);
}
int  addTriangle(Graph   graph, Point   p1,Point   p2,Point    p3){
int t1;
struct node (graph)tr1;
t1=ADD(devngraphtriangle,1);
graph.triangle[t1].nodes[0]=p1;
graph.triangle[t1].nodes[1]=p2;
graph.triangle[t1].nodes[2]=p3;
return t1;
}
int  addTriangle1(Graph   graph, Point   p1,Point   p2){
int t1;
struct node (graph)tr1;
t1=ADD(devngraphtriangle,1);
graph.triangle[t1].nodes[0]=p1;
graph.triangle[t1].nodes[1]=p2;
graph.triangle[t1].nodes[2]=INVALID;
return t1;
}
void verify(struct node   T,Graph   graph){
int x;
if(T.isdel==0 && T.isbad==1){changed=1;}
}

float distanceSquare(Point   p1,Point   p2,Graph   graph){
float x1= p1.x-p2.x;
float y1=p1.y-p2.y;
float dsqr= x1*x1+y1*y1;
return dsqr;
}

float distance(Point   one, Point   two, Graph   graph) {
return sqrtf(distanceSquare(one, two, graph));
}
struct node getOpposite(struct node   t1,Graph   graph ,int obtuse ){
int dims;
dims=t1.nodes[2]==INVALID?2:3;
int commonedgepoint1 = (obtuse + 1) % dims;
for (unsigned ii = 0; ii < dims; ++ii) {
int  nnedgestart = t1.neighedgestart[ ii];
if (nnedgestart == commonedgepoint1) {
                         return t1.neighbours[ ii];
                 }
         }
return INVALID;
}
bool copyNeighbours(struct node  t1, struct node   t2,Graph  graph){
int dims;
for(int i=0;i<3;i++){
t1.neighbours[i]=t2.neighbours[i];
t1.neighedgestart[i]=t2.neighedgestart[i];
}
return false;
}
bool updateNeighbour(struct node  t1, struct node   t2,struct node   t3,Graph  graph){
int dims;
dims=t1.nodes[2]==INVALID?2:3;
for(int i=0;i<dims;i++){
if(t1.neighbours[i]==t2){
t1.neighbours[i]=t3;
}
}
return false;
}
//function checkbad
bool checkbad(struct node  t, Graph graph){
for(int i=0;i<3;i++){
Point  p1,p2,p3;
int te=(i+1)%3;
int te2=(i+2)%3;
if(t.nodes[i]!=INVALID && t.nodes[te] !=INVALID  && t.nodes[te2]!=INVALID){
p1=t.nodes[i];
 p2=t.nodes[te];
 p3=t.nodes[te2];
float vax=p2.x-p1.x;
float vay=p2.y-p1.y;
float vbx=p3.x-p1.x;
float vby=p3.y-p1.y;
float dp=vax*vbx+vay*vby;
if(dp<0) t.obtuse=i;
else {
   float dstsqrap1=distanceSquare(p2,p1,graph);
   float dstsqrap2=distanceSquare(p3,p1,graph);
   float c= dp/sqrtf(dstsqrap1*dstsqrap2);
   if(c> cos(30.0*22.0/(180.0*7.0))) return 1;
}
}
}
return 0;
}
int adjacent(struct node   t1,struct node  t2,Graph   graph){
int common,firstmatch;
common=0;
firstmatch=3;
int dimone,dimtwo;
dimone=graph.triangle[t1].nodes[2]==INVALID? 2: 3;
dimtwo=graph.triangle[t2].nodes[2]==INVALID? 2: 3;
for( int i=0;i<dimone;i++){
 for(int j=0;j<dimtwo;j++){
   if(t1.nodes[i]==t2.nodes[j]){
       if(++common==2)return firstmatch;
       else firstmatch=i;
    }
}
}
return 3;
}

//function findneighbours
//void findneighbours(struct node   t ,Graph  graph){
//int iirow=0;
//foreach(i In graph.triangle){
//if(t!=i){
 //int commonedge=adjacent(t, i,graph);
//if(commonedge<3 &&  iirow<3){
//   t.neighbours[iirow]=i;
 //  t.neighedgestart[iirow]=commonedge;
 //++iirow;
//if(iirow>=3)break;
//}
//}
//}
//for(;iirow<3;++iirow){
//t.neighbours[iirow]=INVALID;
// t.neighedgestart[iirow]=3;
// }

//}

//function distance square


//function dinit

void dinit(struct node   t,Graph  graph){

t.obtuse=3;
t.isbad=checkbad(t,graph);
if(t.isbad==1)WL1.add(t);
t.isdel=0;
}



//getcenter function

struct cent getCenter(struct node  t, Graph   graph){
struct cent ce1;
Point p1,p2,p3;//may be modify this as variable with parent
int dims;
dims=graph.triangle[t].nodes[2]==INVALID? 2: 3;
 p1=t.nodes[0];
 p2=t.nodes[1];
 if(dims==3){p3=t.nodes[2];}
if(!(t.nodes[0]<graph.ntriangle && t.nodes[1]<graph.ntriangle  && t.nodes[2]<graph.ntriangle)){
ce1.centerx=0.0;
ce1.centery=0.0;
return ce1;
}
if(dims==2){
ce1.centerx=(p1.x+p2.x)*0.5;
ce1.centery= p1.y+p1.y*0.5;//statement not prinint t parent not null
return ce1;
}
float vax=p2.x-p1.x;
float vay=p2.y-p1.y;
float vbx=p3.x-p1.x;
float vby=p3.y-p1.y;
float xxlen=distance(p1,p2,graph);
float yylen=distance(p1,p3,graph);
float cosine=(vax*vbx+vay*vby)/(xxlen*yylen);
float sinesq= 1.0-cosine*cosine;
float plen=yylen/xxlen;
float ss= plen *cosine;
float tt=plen*sinesq;
float wp=(plen-cosine)/(2.0*tt);
float wb=0.5 -(wp*ss);
ce1.centerx=p1.x*(1.0-wb-wp)+p2.x*wb+p3.x*wp;
ce1.centery=p1.y*(1.0-wb-wp)+p2.y*wb+p3.y*wp;
return ce1;
}

//function radius sqaure

float radiusSqaure(Point   p1,struct node   t,Graph   graph){
Point p2;
p2= t.nodes[0];
return distanceSquare(p1,p2,graph);

}


//function inCircumCircle
bool inCircumCircle(Point   P0 , struct node  t1,Graph   graph){
struct cent ce1;
ce1=getCenter(t1,graph);
Point  P1,P2;
P1.x=ce1.centerx;
P1.y=ce1.centery;
float dd= distanceSquare(P1,P0,graph);//has to verify these two lines
return dd<=radiusSqaure(P1,t1,graph);
}


void drefine(struct node   ppp,Graph   graph,Collection current[struct node],Collection collnext[struct node]){
struct cent cent_new;
Collection  pred[struct node (graph)], frontier[struct node (graph)], post[struct node (graph) ], conntria1[ struct node (graph)],conntria2[struct node (graph)];
Collection  conn1[Point (graph)],conn2[Point (graph)],conn3[Point(graph)],conn4[Point(graph)];
struct node (graph) ceelem;
int t1;
t1=ppp.id;
struct node(graph) t;
t=graph.triangle[t1];
int lchanged=0;
int successfull=0;
if(  !( t.isdel) && (t.isbad)){
ceelem=t;
int cebot;
cebot=t.obtuse;
int itr=0;
while(cebot<3 && ++itr<50  && ceelem<graph.ntriangle){
ceelem=getOpposite(ceelem,graph,cebot);
if(ceelem< graph.ntriangle){
cebot=ceelem.obtuse;

}
}
if(ceelem>=graph.ntriangle || ceelem.isdel){
ceelem=t;
cebot=ceelem.obtuse;
}
cent_new=getCenter(ceelem,graph);
//Point P1,(graph)P0;this doesnot convert P0 to int P0;
Point P1;
Point (graph)P0;
P1.x=cent_new.centerx;
P1.y=cent_new.centery;
pred.add(ceelem);
frontier.add(ceelem);
while(frontier.getSize()>0){
struct node (graph) curr;
frontier.del(curr);
if(curr>=graph.ntriangle)break;
int dims;
dims=curr.nodes[2]==INVALID?2:3;
for(int i=0;i<dims;i++){
struct node (graph)  next;
next=curr.neighbours[i];
if(next>=graph.ntriangle)break;
if(next>=graph.ntriangle)break;//modi
if(next.isdel)continue;
int nextdims;
nextdims=next.nodes[2]==INVALID?2:3;
if(!(next!=ceelem && dims==2 && nextdims==2) && inCircumCircle(P1,next,graph)){//parameter matching not done ,problem in P1,P0 declaration
if(nextdims==2 && dims!=2){
frontier.size=0;
pred.size=0;
conn1.size=0;
conn2.size=0;
conntria1.size=0;
conntria2.size=0;
ceelem=next;
cebot=ceelem.obtuse;
itr=0;
while(cebot<3 && ++itr<50  && ceelem<graph.ntriangle){
ceelem=getOpposite(ceelem,graph,cebot);
if(ceelem< graph.ntriangle){
cebot=ceelem.obtuse;
}
}
if(ceelem>=graph.ntriangle || ceelem.isdel){
ceelem=next;
cebot=ceelem.obtuse;
}
cent_new=getCenter(ceelem,graph);
P1.x=cent_new.centerx;
P1.y=cent_new.centery;
pred.add(ceelem);
frontier.add(ceelem);
}
else {unsigned jj;
for(jj=0;jj<pred.getSize();jj++){
 if(pred[jj]==next)break;
}
if(jj==pred.getSize()){
pred.add(next);
frontier.add(next);
}
}
}
else {
int pi1=curr.neighedgestart[i];
if(pi1>=3)continue;
Point (graph)p1=curr.nodes[pi1];
Point (graph)p2=curr.nodes[(pi1+1)%3];
unsigned jj;
for(jj=0;jj<conn1.getSize();jj+=1){
if(conn1[jj]==p1 && conn2[jj]==p2)break;
}
if(jj==conn1.getSize()){
conn1.add(p1);
conn2.add(p2);
conntria1.add(curr);
conntria2.add(next);

}

}
}
}
}
single(pred){
if(  !( t.isdel) && (t.isbad)){
++successfull;
Point (graph) p0;
int dims;
dims=ceelem.nodes[2]==INVALID?2:3;
p0=graph.addPoint(cent_new.centerx,cent_new.centery);
if(dims==2){
struct node (graph)tr1,(graph)tr2;
Point (graph)inv_point;
inv_point=ceelem.nodes[0];
int nov20;
nov20=addTriangle1(graph,p0,inv_point);
tr1=graph.triangle[nov20];
inv_point=ceelem.nodes[1];
nov20=addTriangle1(graph,p0,inv_point);
tr2=graph.triangle[nov20];
post.add(tr1);
post.add(tr2);
copyNeighbours(tr1,ceelem,graph);
copyNeighbours(tr2,ceelem,graph);

}
for (unsigned ii = 0; ii <conn1.getSize(); ii +=1) {
Point (graph) p1=conn1[ii];
Point (graph) p2=conn2[ii];
struct node (graph) connsrc;
connsrc= conntria1[ii];
struct node (graph) conndst;
conndst=conntria2[ii];
struct node (graph) newtri;
int nov20;
nov20=addTriangle(graph,p0,p1,p2);
newtri=graph.triangle[nov20];
int jj1;
for (jj1 = 0; jj1 < pred.getSize(); jj1+=1) {
if (pred[jj1] == conndst)  break;
jj1++;
}
struct node (graph) newconn;
if(jj1==pred.getSize())newconn=conndst;
else newconn=connsrc;
int iinbr=0;
newtri.neighbours[0]=newconn;//modi
newtri.neighedgestart[0]=1;//modi
iinbr++;
for (unsigned jj = 0; jj < post.getSize(); ++jj) {
int commonedgestart= adjacent(post[jj], newtri,graph);
if (commonedgestart < 3 && iinbr<3){
newtri.neighbours[iinbr]=post[jj];
newtri.neighedgestart[iinbr]=commonedgestart;
++iinbr;
struct node (graph) temp1;
temp1=post[jj];
struct node (graph)unx;
unx=post[jj];
updateNeighbour(unx, newconn, newtri, graph); 
}

}

post.add( newtri);

}
unsigned jj;
for (jj = 0; jj < pred.getSize(); ++jj) {
struct node (graph) temp1;
pred.del(temp1);
temp1.isdel=1;
}



for (unsigned ii = 0; ii < post.getSize(); ++ii) {
   struct node (graph) xyx;
    post.del(xyx);
    xyx.obtuse = 3;
   xyx.isbad = checkbad(xyx,graph);
if(xyx.isbad==1)collnext.add(xyx);
 lchanged |= xyx.isbad;
                 
                }
if (lchanged) {
                changed = 1;
        }
}
}
else {
if(  !( t.isdel) && (t.isbad)){
collnext.add(xyx);
lchanged = 1;
++aborted;
continue;
}
}
}

//function Main
int main(int argc,char *argv[]){
int ntria;
hgraph.addProperty(triangle,struct node);
hgraph.readNodes(argv[1],2);
readTriangle(hgraph,argv[1]);
hgraph.getType()  graph;
current=&WL1;
collnext=&WL2;
foreach(t In hgraph.triangle)dinit(t,hgraph);
//foreach(t In hgraph.triangle)findneighbours(t,hgraph);
while(1){
changed=0;
foreach(t In *current)drefine(t,hgraph,*current,*collnext);
colltemp=current;
current=collnext;
collnext=current;
if(*current.empty())break;
if(changed==0)break;
}
foreach(t In hgraph.triangle)verify(t,hgraph);
}
